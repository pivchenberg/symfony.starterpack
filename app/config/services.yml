parameters:
  file_uploader_default_directory: "/web/uploads/files"

services:
    # First we define some basic services to make these utilities available in
    # the entire application
    slugger:
        class: AppBundle\Utils\Slugger

    markdown:
        class: AppBundle\Utils\Markdown

    # These are the Twig extensions that create new filters and functions for
    # using them in the templates
    app.twig.app_extension:
        public:    false
        class:     AppBundle\Twig\AppExtension
        arguments: ['@markdown', '%app_locales%']
        tags:
            - { name: twig.extension }

    app.twig.intl_extension:
        public: false
        class:  Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    # Defining a form type as a service is only required when the form type
    # needs to use some other services, such as the entity manager.
    # See http://symfony.com/doc/current/best_practices/forms.html
    app.form.type.tagsinput:
        class: AppBundle\Form\Type\TagsInputType
        arguments: ['@doctrine.orm.entity_manager']
        tags:
            - { name: form.type }

    # Event Listeners are classes that listen to one or more specific events.
    # Those events are defined in the tags added to the service definition.
    # See http://symfony.com/doc/current/event_dispatcher.html#creating-an-event-listener
#    app.redirect_to_preferred_locale_listener:
#        class: AppBundle\EventListener\RedirectToPreferredLocaleListener
#        arguments: ['@router', '%app_locales%', '%locale%']
#        tags:
#            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    app.comment_notification:
        class: AppBundle\EventListener\CommentNotificationListener
        arguments: ['@mailer', '@router', '@translator', '%app.notifications.email_sender%']
        # The "method" attribute of this tag is optional and defaults to "on + camelCasedEventName"
        # If the event is "comment.created" the method executed by default is "onCommentCreated()".
        tags:
            - { name: kernel.event_listener, event: comment.created, method: onCommentCreated }

    # Event subscribers are similar to event listeners but they don't need service tags.
    # Instead, the PHP class of the event subscriber includes a method that returns
    # the list of events listened by that class.
    # See http://symfony.com/doc/current/event_dispatcher.html#creating-an-event-subscriber
    app.requirements_subscriber:
        class: AppBundle\EventListener\CheckRequirementsSubscriber
        arguments: ['@doctrine.orm.entity_manager']
        tags:
            - { name: kernel.event_subscriber }

    # To inject the voter into the security layer, you must declare it as a service and tag it with security.voter.
    # See http://symfony.com/doc/current/security/voters.html#configuring-the-voter
    app.post_voter:
        class: AppBundle\Security\PostVoter
        public: false
        tags:
            - { name: security.voter }

    # Uncomment the following lines to define a service for the Post Doctrine repository.
    # It's not mandatory to create these services, but if you use repositories a lot,
    # these services simplify your code:
    #
    # app.post_repository:
    #     class:     Doctrine\ORM\EntityRepository
    #     factory:   ['@doctrine.orm.entity_manager', getRepository]
    #     arguments: [AppBundle\Entity\Post]
    #
    # // traditional code inside a controller
    # $entityManager = $this->getDoctrine()->getManager();
    # $posts = $entityManager->getRepository('AppBundle:Post')->findAll();
    #
    # // same code using repository services
    # $posts = $this->get('app.post_repository')->findAll();

    #starting pack services
    sp.email_messages:
      class: AppBundle\Services\EmailMessages
      arguments: ["@twig"]

    sp.file_uploader:
      class: AppBundle\Services\FileUploader
      arguments: ["@service_container", "%file_uploader_default_directory%"]

    sp.plural_form:
      class: AppBundle\Services\PluralForm
      autowire: true

    sp.ru_date_format:
      class: AppBundle\Services\RuDateFormat
      autowire: true

    sp.random:
      class: AppBundle\Services\Random
      autowire: true

    sp.breadcrumbs:
      class: AppBundle\Services\Breadcrumbs
      autowire: true

    #starting pack twig extensions
    sp.ru_date_format_extansion:
      class: AppBundle\Twig\RuDateFormatExtension
      autowire: true
      tags:
        - { name: twig.extension }

    sp.float_format:
      class: AppBundle\Twig\FloatFormatExtension
      public: false
      autowire: true
      tags:
        - { name: twig.extension }

    sp.plural_form_extansion:
      class: AppBundle\Twig\PluralFormExtension
      autowire: true
      tags:
        - { name: twig.extension }
